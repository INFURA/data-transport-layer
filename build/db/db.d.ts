import { EnqueueEntry, StateRootBatchEntry, StateRootEntry, TransactionBatchEntry, TransactionEntry } from '../types/database-types';
export declare class TransportDB {
    db: any;
    constructor(db: any);
    putEnqueueEntries(entries: EnqueueEntry[]): Promise<void>;
    putTransactionEntries(entries: TransactionEntry[]): Promise<void>;
    putTransactionBatchEntries(entries: TransactionBatchEntry[]): Promise<void>;
    putStateRootEntries(entries: StateRootEntry[]): Promise<void>;
    putStateRootBatchEntries(entries: StateRootBatchEntry[]): Promise<void>;
    getEnqueueByIndex(index: number): Promise<EnqueueEntry>;
    getTransactionByIndex(index: number): Promise<TransactionEntry>;
    getFullTransactionByIndex(index: number): Promise<TransactionEntry>;
    getTransactionsByIndexRange(start: number, end: number): Promise<TransactionEntry[]>;
    getFullTransactionsByIndexRange(start: number, end: number): Promise<TransactionEntry[]>;
    getTransactionBatchByIndex(index: number): Promise<TransactionBatchEntry>;
    getStateRootByIndex(index: number): Promise<StateRootEntry>;
    getStateRootsByIndexRange(start: number, end: number): Promise<StateRootEntry[]>;
    getStateRootBatchByIndex(index: number): Promise<StateRootBatchEntry>;
    getLatestEnqueue(): Promise<EnqueueEntry>;
    getLatestTransaction(): Promise<TransactionEntry>;
    getLatestFullTransaction(): Promise<TransactionEntry>;
    getLatestTransactionBatch(): Promise<TransactionBatchEntry>;
    getLatestStateRoot(): Promise<StateRootEntry>;
    getLatestStateRootBatch(): Promise<StateRootBatchEntry>;
    getHighestSyncedL1Block(): Promise<number>;
    setHighestSyncedL1Block(block: number): Promise<void>;
    private _values;
    private _get;
    private _putBatch;
    private _makeKey;
}
